#! /bin/bash
### BEGIN INIT INFO
# Provides:          flashstreamer
# Required-Start:    $remote_fs $syslog $network
# Required-Stop:     $remote_fs $syslog $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Flash video streamer.
# Description:       Captures video stream from web or ip camera
#                    and translates it to the rtmp server for publishing.
### END INIT INFO

# Author: Vladimir Stavrinov <vstavrinov@gmail.com>
#
#set -x -v

PATH=/sbin:/usr/sbin:/bin:/usr/bin
SELF="$(basename $0)"
PID="$(ps ho pid -C $SELF)"
PID=${PID/$$/}
PID=${PID/ /}
ETC="etc"

DESC="Flash video streamer"
NAME=flashstreamer
DAEMON=/usr/bin/$NAME
DAEMON_ARGS=""
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME
INITTAB="2:respawn:$DAEMON -c /$ETC/$NAME/enabled"

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Create configuration array
STREAMS=($(ls /$ETC/flashstreamer/enabled))
[ -n "$2" ] && STREAMS=($2)

# Load the VERBOSE setting and other rcS variables
#. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

VERBOSE="yes"
export VERBOSE

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	if [ ${#STREAMS[@]} -eq 0 ]; then
		echo -e ": \\n No config enabled. Nothing to start."
		return 2
	fi
	ID=$(grep ":$INITTAB" /etc/inittab | 
		awk -F: '{print gensub("v([0-9]{1,3})", "\\1", 1, $1)}' |
		sort -n | tail -1)
	for CONF in ${STREAMS[@]}; do
		if ! grep -q ":$INITTAB/${CONF}" /etc/inittab; then
			echo "v$((++ID)):$INITTAB/${CONF}" >> /etc/inittab
			telinit q
			: ${RETRUN:=0}
		else
			echo already running.
			RETRUN=1
		fi
	done
	return $RETRUN
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	for CONF in "${STREAMS[@]}"; do
		if grep -q ":$INITTAB/${CONF}" /etc/inittab; then
			sed -i "\%:$INITTAB/${CONF}%d" /etc/inittab
			telinit q
			: ${RETRUN:=0}
		else
			echo "not running."
			RETRUN=1
		fi
	done
	return $RETRUN
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
	return 0
	start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME
	return 0
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME "
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME "
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
	if [ -n "$PID" ]; then
		for ROOT in "$PID"; do
			ps wwfo user,pid,nice,tt,stat,lstart,command $(progeny $ROOT)
		done
	else
		echo $NAME not running.
	fi
	exit 0
	status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
	;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME "
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
		# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

:
